using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*  유니티의 주요 이벤트 함수에 대한 강의, 플레이어 컨트롤 코딩 강의 */

public class 캐릭터4장_정리 : MonoBehaviour
{
  // Start와 Update 함수는 가장 기본적인 함수이자 이벤트 함수. 
  // Event 함수?? 특정 조건을 만족할 때 시스템에서 자동으로 호출해주는 함수를 말한다.
  // 이때 시스템은 유니티엔진을 말하며, Start와 Update 함수는 유니티 엔진에서 자동으로 호출해주기 때문에 
  // 유니티 이벤트 함수라고 한다!

    void Awake() { }   // Start 함수가 호출되기 전에 맨 먼저 호출됨, 스크립트가 비활성화돼 있어도 실행됨
  // 스크립트가 실행될 때 한번만 호출되는 함수
  // 주로 게임의 상태 값 또는 변수의 초기화에 사용
  // 코루틴으로 실행 불가
    void OnEnable() {}
    // 게임오브젝트 또는 스크립트가 활성화됐을 때 호출됨
    // 주로 사용자 정의 이벤트 연결에 사용한다
    // 코루틴 사용 불가 
  void Start() {} 
    // Start 함수?
    // Update 함수가 호출되기 전에 한 번만 호출됨
    // 스크립트가 활성화돼 있어야 실행된다
    // 다른 스크립트의 모든 Awake가 모두 다 실행된 이후에 실행됨
    // 코루틴으로 실행 가능


    void Update() {}
    // Update 함수?
    // 프레임마다 호출되는 함수로 주로 게임의 핵심 로직을 작성함
    // 스크립트가 활성화돼 있어야 실행된다

    void LateUpdate () {}
    // LateUpdate 함수?
    // 모든 Update 함수가 호출되고 난 이후에 호출된다
    // Update 함수에서 전처리가 끝난 후 실행해야 하는 로직에 사용한다
    // 스크립트가 활성화돼 있어야 실행된다

    void FixedUpdate () {}
    // 물리 엔진의 시뮬레이션 계산 주기로 기본값은 0.02초다
    // 발생하는 주기가 일정

    void OnDisable () {}
    // 게임오브젝트 또는 스크립트가 비활성화됐을 때 호출된다
    // 이벤트 연결을 종료할 때 사용한다
    // 코루틴 사용 불가 


        // 캐릭터 이동방법
    // 유니티에서 어떤 물체를 이동시키거나 회전시키는 방법은 2가지로 분류할 수 있다.
    // 첫 번째 방법은 모든 게임 오브젝트에 있는 Transform 컴포넌트의 position, rotation 속성값을
    // 지속해서 변경하는 것.
    // 두 번째 방법은 내장된 물리 엔진을 이용해 Force와 Torque를 가해 변경시키는 것이다.
    // Transform / PhysX, Box2D



        // 컴포넌트 캐시 처리
    // Update 함수는 프레임마다 한번씩 호출되기 때문에 항상 최적화에 신경써야 한다.
    // 예를 들어, 게임을 실행하는 디바이스가 30프레임이라면 Update 함수는 이론적으로 1초에 30번 호출된다.
    // 따라서 조금이라도 부하가 걸리는 함수나 잘못된 로직은 자제해야 한다. 
    // 특히 이동 로직은 Transform 컴포넌트의 Position 속성을 조금씩 변경하는 것으로 
    // 프레임마다 Transform 컴포넌트에 접근하는 방식은 바람직하지 않다! 
    
  
}
